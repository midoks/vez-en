// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6b\xe4\xb8\x12\x7e\xd7\xaf\x28\xcc\x19\x48\xa0\xe3\xb6\x93\x43\x32\xa7\x1b\x3f\x1c\x66\x99\x0b\x64\xd9\x61\x92\x61\x60\x42\x70\xd4\x56\xd9\xad\x6d\x59\x65\x24\xb9\x2f\xf3\xeb\x97\x92\xed\x4e\x67\x27\x0b\xf3\xb2\x79\x49\xcb\xaa\xfa\xaa\x54\x97\xaf\x4a\x76\x5d\x69\x65\x8b\x50\x40\xb2\xc5\x1f\x17\x68\x13\xb1\x72\xd2\xaa\x9f\xbe\xba\xde\x96\xbd\x47\xc7\xdf\x1c\x51\x18\xbe\xb4\xa4\xa2\x54\xe7\x48\x25\x42\x3c\x28\x5c\xf5\xcd\xa3\xe8\xc8\x85\x22\xcf\xb3\xfc\x52\x08\xf1\x60\xa8\x79\x14\x4b\xb8\x5f\x23\x18\x6a\xa0\x26\xd7\xca\x00\xa8\xc3\x1a\x1d\x24\x7f\x7a\xb2\x09\x90\x83\x24\xe0\x3e\x24\x62\xbc\x2e\xa6\x33\x1b\x2b\x3b\x19\xd6\xfc\xc9\x50\xe3\xd9\x8e\x43\xa5\xfd\x23\x88\x25\xf8\x40\x0e\xc1\xa3\xf7\x9a\xac\x40\x2b\x57\x86\x3d\xaa\xa5\xf1\x28\xa4\x52\x0e\xbd\x67\xcd\xfc\xf2\x26\xcd\xd2\x2c\xcd\x17\xd7\x57\x37\xff\x4b\x44\x27\xbd\xdf\x91\x53\x7c\x97\x08\xb5\xe2\xff\x19\x43\x8f\x50\x93\xc7\xe3\x11\x3a\x47\x5b\xad\xd0\xcd\x8e\x8e\xb7\xd8\x92\x3b\x24\x33\x48\x6a\x6d\x30\x99\xc5\x37\x44\xc7\x92\x54\x4c\xe2\x50\xc0\x20\x37\xc2\x55\x64\x6b\xdd\xf4\x4e\x06\x06\xad\xc9\x81\x43\xdf\x61\x15\xf4\x16\x8f\x36\x16\x62\x09\x17\xa3\xde\x02\x14\xa1\x07\x4b\x01\x2c\xa2\x02\x69\x0f\x23\x08\x1c\x30\x44\x41\x36\xbf\x38\x3a\xca\x27\xe0\x78\xcd\x00\xd3\x26\x85\x27\x25\x83\x9c\x8f\xb7\xfe\x29\x6a\x44\x2f\x17\x60\x31\xec\xc8\x6d\x8a\x50\x75\x33\x0e\x55\x11\x63\x33\x9b\x42\x53\xb4\xb2\x92\x8e\xec\x4c\xad\x8a\x6c\xd6\x11\x99\xd2\xeb\x1f\x58\xe4\x59\x36\xd3\xca\x60\x19\x74\x8b\xd4\x87\x22\x7f\x9b\x1d\x1f\x5c\x8e\xce\x15\xf0\xc2\xee\xf1\xf9\xb4\xd1\x08\xb1\xb8\x02\x8d\xc9\x0b\x27\x61\xd6\x0a\x6d\xd0\xb5\x46\x97\x8a\x41\x78\xaa\x44\x5d\x1a\xbd\xc1\x52\xb7\x52\x1b\xb1\x84\x6f\x6b\x8c\x69\x60\x14\x0c\x13\xb0\xb6\xf0\xf1\xfe\xfe\xf3\x1d\x90\x35\x87\x23\x82\xc7\xaa\x77\x8c\x11\x5c\x8f\xa3\x27\x1f\xde\x81\xb6\x01\xdd\x56\x1a\xd6\xf2\x58\x91\x55\x3e\x66\x64\xf2\x85\x1f\x90\x8a\xa6\x2a\x8f\x82\x05\x5c\x5d\x67\xd9\x88\xd0\xca\xbd\x6e\xfb\x16\x8c\xae\x11\x38\x14\x7f\xc7\x91\x13\x52\x2a\x5a\xb9\x2f\x59\x2e\x86\x0c\x0a\x78\x7b\xfd\xdf\x23\xce\x69\x4c\x58\xed\xdd\xdd\x97\xf7\x10\x68\x83\x36\x15\x95\x77\x75\xf9\x32\x0e\x25\x7f\xe3\xb6\xaa\x64\xb5\xc6\xa9\x4c\xe3\x01\xa4\x92\x5d\x78\xbd\x46\x87\xc2\x1c\x8a\xb4\xc5\x36\xca\x27\xa9\x18\x35\x4e\xcb\xf4\x3d\x3d\x2b\xc6\x38\xce\xfe\x21\x58\xa9\x38\x09\x4c\x7e\x99\x4d\xba\x83\x29\x90\x56\x9d\x98\x9a\x71\xd5\x5a\x2e\x74\xb2\xb0\x26\x1f\x60\x6c\xce\xc5\xbf\x55\x91\x63\x0f\x45\xf3\x0b\x78\x7a\x26\x80\x3c\xbf\xcc\xf3\x27\x11\x9d\x60\xc7\x5f\x7c\x17\xe2\x61\x87\xab\x29\xac\x9d\xa3\x40\x15\x19\x08\x6b\x19\x40\x7b\xe8\x3d\xaa\xa1\xe6\xdc\x16\x41\x69\x87\x55\x80\xe0\x64\x5d\xeb\x8a\xbf\x73\x2d\xcb\xae\x33\xba\x8a\x1d\x9e\x8a\x25\xbc\xeb\x9d\x43\x1b\xcc\x01\x7c\xdf\x31\x33\x7a\x48\xd6\x21\x74\x9c\x15\xfe\xef\x23\x85\x54\x8d\x1e\x43\xd6\x5b\xbd\x1f\x18\x64\x30\x5d\x00\x4b\x8d\x0e\x4d\x8c\x16\x08\x56\x08\x46\xfb\x80\x16\x15\xac\x0e\x3f\x5b\x66\xad\x92\xe5\xa1\x80\x2c\x3e\x31\x13\xd3\xb3\xc8\x05\xb0\x7d\xbb\x1a\x1a\xe8\x97\x90\xa2\x0e\x13\x69\x9e\xe5\x79\x22\x18\xea\x03\x5a\x74\x32\x20\xf8\x80\x5d\x4c\xe4\x1f\x0e\x6a\x47\x2d\x48\x48\xbb\x7a\x3f\x70\x11\xee\x59\x15\xd5\x70\xc3\xe0\xdf\xb4\x55\xb4\xf3\x50\xa1\xe3\x5e\xaf\x06\x08\xa6\x82\x33\x45\x62\x19\xc9\xae\x26\xd7\x60\x60\xef\x06\xfd\xa8\xd8\x39\xbd\x65\xe1\x0d\x1e\xce\xd9\xdc\x7f\x80\x3a\xb4\xde\x1b\xe8\x36\x95\xcf\x2f\xe1\x42\xdb\x88\x1a\xad\x5f\x50\x1f\xc6\x13\xb6\x70\x61\x69\x83\x07\xff\x6b\x5a\x1b\x3c\x4c\x4a\x7c\xe1\xf9\x87\x42\x2f\xf8\x50\xc6\x57\x15\x50\xf5\x3e\x50\x3b\x8f\x29\x9c\x4f\x66\xc4\x06\x0f\xaf\x0a\x8c\x88\x53\x06\x5a\x6d\x23\x79\x48\x63\x68\x87\x0a\xee\x6f\xef\x60\x8b\x8e\xd9\x62\x06\xd5\x2b\x15\x73\x7f\x7b\x97\x67\x5c\x29\xfc\x23\x9f\x7e\x5c\x26\xb3\xa1\x68\xf8\x70\x95\xa4\x22\x18\x5f\xb6\xda\x96\x23\x16\x14\x10\xc5\xb8\x35\xe3\x5c\x40\xd7\xea\x81\xdd\x76\x6b\xb4\x63\x19\x4f\xf5\xbb\xd5\x12\xbe\x5a\xbd\x07\x45\xad\xe4\x3e\xa7\x6a\x83\x21\x15\x5c\x91\xe5\x70\x28\x4f\x10\x0a\xb8\xbe\xbe\x16\x4b\xb8\xa5\x4a\x1a\x38\xfb\xed\xf7\xef\xe7\xf0\xf5\xcb\x6d\x24\x31\xee\x62\x74\x1e\xce\xe2\x0c\xba\xbb\xfb\x08\x7d\xa7\x64\xc0\x73\x90\x55\xc5\xac\x68\x1b\xd8\xe1\x2a\x3a\xa0\x2b\xe4\x3e\xf9\x64\xa1\xe5\x96\xac\xa4\x47\x0f\x07\xea\x41\xd1\xf3\xdc\x0b\x04\xd5\x5a\xda\x66\x18\x17\x0a\x6b\xd9\x9b\x00\x5b\x69\xfa\xa8\xfc\x7f\xc3\x2c\xa6\x43\x24\x2c\xd0\x35\xeb\xbb\x68\x37\x3e\xd1\x01\xe7\x8f\x1b\x98\x01\xe3\xc0\x61\x36\x95\x3e\x8e\x8b\x78\x99\x0a\xc3\xef\x28\xe3\xbe\xd1\x3b\xee\xbb\x37\x67\x53\x13\x9e\xfb\xc5\x7c\xfe\xe6\xec\xd8\x52\xe7\x7e\x31\x9e\x38\x3d\xe7\x7e\x2e\x5e\x8e\x24\xa5\x7d\x5c\x44\x0c\x35\x0d\x3f\x55\x5b\x70\xd4\x07\x9e\x6a\xe3\x55\x39\x9c\x4b\xde\x88\x8e\x83\xe9\x04\x61\xdc\x64\x4e\xfa\x10\x0c\x6e\xd1\xc0\x87\xef\x9f\x3e\x43\x45\x6d\xe7\xa6\xe1\x32\x88\x96\xcd\x0f\xdd\x1d\x37\x9f\x57\xc1\x02\x81\x21\xa9\x40\x7a\x8f\xc1\xc3\x99\x4e\x31\x85\x84\x07\x36\xd7\x53\xc0\xb6\x33\x32\x60\xe4\xa3\xae\x5f\x19\x5d\x25\xe7\x43\xd3\x2a\xed\x37\xa0\xad\x0f\x28\x15\x50\x0d\xd8\xae\x50\x29\x66\x0b\x6d\x87\x29\xc9\xb8\xe5\x80\x5b\xb2\x4a\x19\x55\x4e\xbc\x89\xdb\x9f\xb4\x8a\xa3\xd1\xc9\x06\x8f\x95\x22\x2d\xd9\x43\x4b\x7d\xe4\x56\xe7\x67\x31\x3b\x31\xaf\xe0\xd7\xd4\x1b\x15\x53\xa6\x6d\x65\x7a\xc5\x31\xf2\xfd\x2a\x6e\x83\x13\x23\xaf\xa5\x55\xe6\x99\xb8\x1c\x72\xe9\x47\xe6\xde\x1f\x52\x31\x9a\x1c\x13\x3a\x17\xe2\xa1\x25\xdb\x90\x5a\x3d\xc6\xe5\xb0\x78\x66\xff\xcb\x9b\x2c\xbf\x11\x6a\x55\x0c\x1b\x2f\x4f\x58\xdd\xca\x06\x47\x41\x4e\xf6\x62\x3e\x1f\x89\x74\x71\x75\x75\x75\x35\xd7\x73\xd1\x69\xdb\xbc\x7a\xc7\x17\xf1\xb6\xe4\x05\x8f\xac\xc7\x82\x36\x42\x3c\x10\xe7\xe4\x51\xf8\x35\xed\xca\x9a\x88\x4b\x20\x2e\xdc\x1c\x97\x29\x5c\x4b\xb8\x5b\xd3\x6e\xd8\x29\xa8\x86\x29\x31\x80\x7b\xac\xfa\x58\x0a\xda\xc6\xc7\x0e\x00\x2f\xc0\x26\xe1\x32\x66\x64\x5c\x37\x62\x79\xf1\xdf\x5f\x01\x00\x00\xff\xff\x65\x71\x6f\x4b\xf0\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
